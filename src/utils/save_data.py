###########################################################################################
#
# mixmax-py - a PRNG based on uniformly hyperbolic Anosov C-systems defined on a torus.
#
# Copyright (C) 2019-2025  Michail Liarmakopoulos <mlliarm@yandex.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###########################################################################################

def save_floats_for_TestU01(mixmax, N:int=1_000_000, filename:str="mixmax_testu01.txt") -> None:
    """
    Save floating-point data generated by the `mixmax` generator in a format suitable for the TestU01 testing suite.

    Parameters:
        mixmax: An object with a `next()` method that generates floating-point numbers in the range [0, 1).
        N (int): The number of floating-point values to generate. Defaults to 1,000,000.
        filename (str): The name of the file to save the floating-point data. Defaults to "mixmax_testu01.txt".

    Output format:
        - Each floating-point number is written on a separate line with 17 decimal places of precision.
        - The file is saved in plain text format, with one value per line.

    Note:
        Ensure that the `mixmax` generator is properly initialized before calling this function.
    """
    with open(filename, "w") as f:
        for _ in range(N):
            f.write(f"{mixmax.next():.17f}\n")

def save_bits_for_NIST(mixmax, N:int=1_000_000, filename:str="mixmax_nist.txt") -> None:
    """
    Save binary data generated by the `mixmax` generator in a format suitable for the NIST testing suite.

    Parameters:
        mixmax: An object with a `next()` method that generates floating-point numbers in the range [0, 1).
        N (int): The number of bits to generate. Defaults to 1,000,000.
        filename (str): The name of the file to save the binary data. Defaults to "mixmax_nist.txt".

    Binary format:
        - Each bit is determined by whether the output of `mixmax.next()` is greater than 0.5 (1 for True, 0 for False).
        - Bits are grouped into bytes (8 bits per byte) and written to the specified file.

    Note:
        Ensure that the `mixmax` generator is properly initialized before calling this function.
    """
    with open(filename, "wb") as f:
        byte = 0
        count = 0
        for _ in range(N):
            bit = 1 if mixmax.next() > 0.5 else 0
            byte = (byte << 1) | bit
            count += 1
            if count == 8:
                f.write(bytes([byte]))
                byte = 0
                count = 0
        # Write the last incomplete byte if there are remaining bits
        if count > 0:
            byte = byte << (8 - count)  # Shift remaining bits to fill the byte
            f.write(bytes([byte]))


def save_uint32_for_dieharder(mixmax, N: int = 100_000_000, 
                               filename: str = "mixmax_dieharder.bin") -> None:
    """
    Save 32-bit unsigned integers for Dieharder testing.
    
    Parameters:
        mixmax: Generator with next() method returning floats in [0, 1)
        N (int): Number of 32-bit integers to generate. Defaults to 100 million.
        filename (str): Output binary file. Defaults to "mixmax_dieharder.bin".
    
    Binary format:
        - Each random float is converted to a 32-bit unsigned integer.
        - Integers are written in little-endian format.
        - File size will be N × 4 bytes.
    
    Note:
        For full Dieharder suite, use N >= 1 billion.
    """
    import struct
    with open(filename, "wb") as f:
        for _ in range(N):
            # Convert float [0,1) to 32-bit unsigned integer
            value = int(mixmax.next() * (2**32)) & 0xFFFFFFFF
            f.write(struct.pack('<I', value))  # '<I' = little-endian uint32

def save_uint64_for_dieharder(mixmax, N: int = 100_000_000, 
                               filename: str = "mixmax_dieharder.bin") -> None:
    """
    Save 64-bit unsigned integers for Dieharder testing.
    
    Parameters:
        mixmax: Generator with next() method returning floats in [0, 1)
        N (int): Number of 64-bit integers to generate. Defaults to 100 million.
        filename (str): Output binary file. Defaults to "mixmax_dieharder.bin".
    
    Binary format:
        - Each random float is converted to a 64-bit unsigned integer.
        - Integers are written in little-endian format.
        - File size will be N × 8 bytes.
    
    Note:
        For full Dieharder suite, use N >= 1 billion.
    """
    import struct
    with open(filename, "wb") as f:
        for _ in range(N):
            # Convert float [0,1) to 64-bit unsigned integer
            value = int(mixmax.next() * (2**64)) & 0xFFFFFFFFFFFFFFFF
            f.write(struct.pack('<Q', value))  # '<Q' = little-endian uint64